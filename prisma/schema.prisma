// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(cuid())
  email             String   @unique
  username          String?  @unique
  firstName         String
  lastName          String
  password          String
  phoneNumber       String?
  avatar            String?
  isActive          Boolean  @default(true)
  isEmailVerified   Boolean  @default(false)
  emailVerifiedAt   DateTime?
  lastLoginAt       DateTime?
  lastLoginIp       String?
  failedLoginAttempts Int    @default(0)
  lockedAt          DateTime?
  lockedUntil       DateTime?
  
  // 2FA fields
  twoFactorEnabled  Boolean  @default(false)
  twoFactorSecret   String?
  twoFactorBackupCodes String[]
  
  // Password reset
  resetPasswordToken String?
  resetPasswordExpires DateTime?
  
  // Magic link
  magicLinkToken    String?
  magicLinkExpires  DateTime?
  
  // Profile fields
  timezone          String   @default("UTC")
  language          String   @default("en")
  dateFormat        String   @default("YYYY-MM-DD")
  timeFormat        String   @default("24")
  
  // Audit fields
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  createdBy         String?
  updatedBy         String?
  
  // Relations
  roles             UserRole[]
  sessions          UserSession[]
  auditLogs         AuditLog[]
  userSettings      UserSetting[]
  
  @@map("users")
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  displayName String
  description String?
  isSystem    Boolean  @default(false)
  isActive    Boolean  @default(true)
  parentId    String?
  parent      Role?    @relation("RoleHierarchy", fields: [parentId], references: [id])
  children    Role[]   @relation("RoleHierarchy")
  
  // Audit fields
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String?
  updatedBy   String?
  
  // Relations
  users       UserRole[]
  permissions RolePermission[]
  
  @@map("roles")
}

model Permission {
  id          String   @id @default(cuid())
  name        String   @unique
  displayName String
  description String?
  resource    String   // e.g., "users", "applications", "roles"
  action      String   // e.g., "create", "read", "update", "delete"
  scope       String?  // e.g., "own", "department", "all"
  isSystem    Boolean  @default(false)
  
  // Audit fields
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String?
  updatedBy   String?
  
  // Relations
  roles       RolePermission[]
  
  @@unique([resource, action, scope])
  @@map("permissions")
}

model UserRole {
  id        String   @id @default(cuid())
  userId    String
  roleId    String
  assignedAt DateTime @default(now())
  assignedBy String?
  expiresAt DateTime?
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  
  @@unique([userId, roleId])
  @@map("user_roles")
}

model RolePermission {
  id           String     @id @default(cuid())
  roleId       String
  permissionId String
  assignedAt   DateTime   @default(now())
  assignedBy   String?
  
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  
  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

model Application {
  id              String   @id @default(cuid())
  name            String   @unique
  displayName     String
  description     String?
  clientId        String   @unique
  clientSecret    String
  redirectUris    String[] // JSON array of allowed redirect URIs
  scopes          String[] // JSON array of allowed scopes
  logo            String?
  website         String?
  contactEmail    String?
  isActive        Boolean  @default(true)
  isFirstParty    Boolean  @default(false) // Internal company applications
  
  // Application settings
  allowedOrigins  String[] // CORS origins
  tokenLifetime   Int      @default(3600) // seconds
  refreshTokenLifetime Int @default(604800) // seconds
  
  // Audit fields
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  createdBy       String?
  updatedBy       String?
  
  // Relations
  apiKeys         ApiKey[]
  sessions        UserSession[]
  auditLogs       AuditLog[]
  
  @@map("applications")
}

model ApiKey {
  id            String      @id @default(cuid())
  applicationId String
  name          String
  keyId         String      @unique
  keySecret     String      @unique
  permissions   String[]    // JSON array of permissions
  isActive      Boolean     @default(true)
  lastUsedAt    DateTime?
  lastUsedIp    String?
  expiresAt     DateTime?
  
  // Rate limiting
  rateLimit     Int         @default(1000) // requests per hour
  rateLimitWindow Int       @default(3600) // seconds
  
  // API Key Rotation fields
  lastRotatedAt     DateTime?
  scheduledRotationAt DateTime?
  autoRotateAfterDays Int?      // Auto-rotate after X days
  rotatedBy         String?     // Who triggered the rotation
  
  // Audit fields
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  createdBy     String?
  updatedBy     String?
  
  application   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  
  @@map("api_keys")
}

model UserSession {
  id            String      @id @default(cuid())
  userId        String
  applicationId String?
  sessionToken  String      @unique
  refreshToken  String?     @unique
  ipAddress     String
  userAgent     String
  isActive      Boolean     @default(true)
  expiresAt     DateTime
  lastActivityAt DateTime   @default(now())
  
  // Session metadata
  country       String?
  city          String?
  device        String?
  browser       String?
  os            String?
  
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  application   Application? @relation(fields: [applicationId], references: [id], onDelete: SetNull)
  
  @@map("user_sessions")
}

model AuditLog {
  id            String      @id @default(cuid())
  userId        String?
  applicationId String?
  action        String      // e.g., "login", "logout", "create_user", etc.
  resource      String?     // e.g., "user", "role", "application"
  resourceId    String?     // ID of the affected resource
  details       Json?       // Additional details about the action
  ipAddress     String
  userAgent     String
  success       Boolean     @default(true)
  errorMessage  String?
  
  createdAt     DateTime    @default(now())
  
  user          User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
  application   Application? @relation(fields: [applicationId], references: [id], onDelete: SetNull)
  
  @@index([userId])
  @@index([action])
  @@index([createdAt])
  @@map("audit_logs")
}

model UserSetting {
  id        String   @id @default(cuid())
  userId    String
  key       String
  value     String
  type      String   @default("string") // string, number, boolean, json
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, key])
  @@map("user_settings")
}

model SystemSetting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  type      String   @default("string") // string, number, boolean, json
  description String?
  category  String   @default("general")
  isPublic  Boolean  @default(false) // Can be accessed by non-admin users
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  updatedBy String?
  
  @@map("system_settings")
}

model EmailTemplate {
  id          String   @id @default(cuid())
  name        String   @unique
  subject     String
  htmlContent String
  textContent String?
  category    String   @default("general")
  description String?
  variables   Json?    // Available template variables
  isActive    Boolean  @default(true)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String?
  updatedBy   String?
  
  @@index([category])
  @@index([isActive])
  @@map("email_templates")
}

model EmailQueue {
  id          String   @id @default(cuid())
  to          String
  subject     String
  htmlContent String
  textContent String?
  templateId  String?
  templateData Json?
  status      String   @default("pending") // pending, sent, failed
  attempts    Int      @default(0)
  maxAttempts Int      @default(3)
  errorMessage String?
  sentAt      DateTime?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([status])
  @@index([createdAt])
  @@map("email_queue")
}