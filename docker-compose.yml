version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: tekparola-postgres
    environment:
      POSTGRES_DB: tekparola
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - tekparola-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: tekparola-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - tekparola-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # TekParola Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: tekparola-app
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://postgres:postgres123@postgres:5432/tekparola
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your-super-secret-jwt-key-change-this-in-production
      JWT_REFRESH_SECRET: your-super-secret-refresh-key-change-this-in-production
      JWT_EXPIRES_IN: 15m
      JWT_REFRESH_EXPIRES_IN: 7d
      PORT: 3000
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - tekparola-network
    volumes:
      - ./uploads:/app/uploads
    restart: unless-stopped

  # Adminer for database management (development only)
  adminer:
    image: adminer:latest
    container_name: tekparola-adminer
    ports:
      - "8080:8080"
    networks:
      - tekparola-network
    profiles:
      - development

volumes:
  postgres_data:
  redis_data:

networks:
  tekparola-network:
    driver: bridge